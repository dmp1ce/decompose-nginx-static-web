# Include common processes
source $(_decompose-project-root)/.decompose/environment/lib/web/processes
source $(_decompose-project-root)/.decompose/environment/lib/common/processes
source $(_decompose-project-root)/.decompose/environment/lib/backup/processes
source $(_decompose-project-root)/.decompose/environment/lib/docker/processes

DECOMPOSE_PROCESSES=( 'build' 'up'
  "${DECOMPOSE_WEB_PROCESSES[@]}" "${DECOMPOSE_COMMON_PROCESSES[@]}"
  "${DECOMPOSE_BACKUP_PROCESSES[@]}" )

_decompose-process-build() {
  _decompose-process-common-build
  _decompose-process-build_version_file
  _decompose-process_nginx_proxy_build
  _decompose-process-docker-build
}
_decompose-process-build_help() {
  echo "  Build the project"
}

_decompose-process-up() {
  if [[ $PRODUCTION ]]; then
    docker-compose up -d --force-recreate
  else
    docker-compose up -d
  fi

  # Restart nginx_proxy if the image changed
  local nginx_proxy_cid=$(_decompose-process_nginx_proxy_id)
  local nginx_proxy_container_iid=$(docker inspect --format "{{.Image}}" $nginx_proxy_cid)
  local nginx_proxy_image_id=$(docker inspect --format "{{.Id}}" $PROJECT_NGINX_PROXY_IMAGE)
  if [ "$nginx_proxy_container_iid" != "$nginx_proxy_image_id" ]; then
    echo "$PROJECT_NGINX_PROXY_IMAGE hash changed."
    _decompose-process-recreate_nginx_proxy
  else
    _decompose-process-restart_nginx_proxy
  fi
}
_decompose-process-up_help() {
  echo "  Start project locally"
}

# vim:syntax=sh
